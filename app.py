
import streamlit as st
import pandas as pd
import requests

st.set_page_config(page_title="TED Market Analyzer ‚Äî –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π API", layout="wide")
st.title("üåç TED Market Analyzer ‚Äî API V3 (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)")

st.markdown("##### –ü–æ–∏—Å–∫ —Ç–µ–Ω–¥–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ API TED v3 —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å—Ç—Ä–∞–Ω–∞–º.")

keywords = st.text_input("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):", "air quality, emission, dispersion, monitoring, risk")
selected_countries = st.multiselect(
    "–°—Ç—Ä–∞–Ω—ã:",
    options=[
        "AT", "BE", "BG", "HR", "CY", "CZ", "DK", "EE", "FI", "FR", "DE", "GR", "HU", "IE", "IT",
        "LV", "LT", "LU", "MT", "NL", "PL", "PT", "RO", "SK", "SI", "ES", "SE", "NO", "IS", "LI", "CH", "UK"
    ],
    default=["DE", "LV", "PL"]
)

if st.button("üîç –ù–∞–π—Ç–∏ —Ç–µ–Ω–¥–µ—Ä—ã"):
    if not selected_countries:
        st.error("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω—É.")
    else:
        st.info("‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ TED API...")
        query = " OR ".join(k.strip() for k in keywords.split(","))

        url = "https://api.ted.europa.eu/v3/notices/search"
        headers = {"Content-Type": "application/json"}

        body = {
            "q": query,
            "filters": {
                "country": selected_countries
            },
            "limit": 100
        }

        try:
            response = requests.post(url, json=body, headers=headers)
            st.write("üîß –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞:", response.status_code)

            if response.status_code == 200:
                data = response.json()
                st.success("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")

                if "results" in data:
                    df = pd.DataFrame([{
                        "ID": r.get("id"),
                        "Title": r.get("title", {}).get("en", "‚Äî"),
                        "Country": r.get("country"),
                        "Publication Date": r.get("publicationDate", "‚Äî"),
                        "URL": f'https://ted.europa.eu/en/notice/{r.get("id")}'
                    } for r in data["results"]])
                    st.dataframe(df)
                    st.download_button("üíæ –°–∫–∞—á–∞—Ç—å CSV", df.to_csv(index=False), "ted_results.csv")
                else:
                    st.warning("–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            else:
                st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: " + response.text)
        except Exception as e:
            st.exception(f"üö® –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
